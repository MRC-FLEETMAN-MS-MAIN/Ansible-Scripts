#  Builds a Global Config Server and Creates an AMI for it before terminating the instance.

- hosts: localhost
  gather_facts: no
  vars:
     region: eu-west-1
     keypair_name: microservice
     security_group_name: config-server-security-group
     instance_type: t2.nano
     image_name: ami-70edb016

  tasks:
    - name: Setup security group
      ec2_group:
        name: "{{ security_group_name }}"
        description: Security rules for Global Config Server
        region: "{{ region }}"
        rules_egress:
            - proto: tcp
              from_port: 0
              to_port: 65535
              cidr_ip: 0.0.0.0/0
        rules:
           - proto: tcp
             from_port: 8012
             to_port: 8012
             cidr_ip: 0.0.0.0/0

           - proto: tcp
             from_port: 22
             to_port: 22
             cidr_ip: 0.0.0.0/0

    - name: Provision an instance
      ec2:
        key_name: "{{ keypair_name }}"
        group: "{{ security_group_name }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image_name }}"
        wait: true
        region: "{{region}}"
        exact_count: 1
        count_tag:
          Name: Config_Server
        instance_tags:
          Name: Config_Server
      register: ec2

    - name: Add all instance public IPs to host group
      add_host: hostname={{ item.public_ip }} groups=ec2hosts
      with_items: "{{ec2.instances}}"

    - name: Wait for SSH Server to start responding
      wait_for:
              port: 22
              host: "{{item.public_ip}}"
              state: started
      with_items: "{{ec2.instances}}"

- hosts: tag_Name_Config_Server ec2hosts
  tasks:
  - name: upgrade all packages
    yum: name=* state=latest
    become: true

  - name: Ensure git is installed
    yum: name=git state=latest
    become: true

  - name: Checkout Project
    git:
       repo: https://github.com/MRC-FLEETMAN-MS-MAIN/MRCConfigServer
       dest: /home/ec2-user/global-config-server/
       version: master




  - name: Install JDK
    yum:
       name: java-1.8.0-openjdk-devel
       state: latest
    become: true

  - name: Use Java8 for Runtime Java
    alternatives:
       name: java
       path: /usr/lib/jvm/jre-1.8.0-openjdk/bin/java
       link: /usr/bin/java
    become: true


  - name: Remove exisiting docker files
    yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: removed
    become: yes

  - name: Install Docker
    yum:
        name:
          - docker
    become: yes

  - name: "Starting and Enabling Docker service"
    service:
        name: docker
        state: started
        enabled: yes
    become: yes


  - name: Add user ec2-user to docker group
    user:
         name: ec2-user
         groups: docker
         append: yes
    become: yes



  - name: Build the Docker image
    command: docker build --tag config:1.0 .
    args:
            chdir: global-config-server/
    become: yes



 - name: Run the Docker container
    command: docker run --restart always --publish 8012:8012 --detach --name miniconfig config:1.0
    become: yes
